package net.zdsoft.framework.utils;import java.net.InetAddress;import java.net.UnknownHostException;import java.util.HashMap;import java.util.Map;import javax.servlet.http.HttpServletRequest;import eu.bitwalker.useragentutils.Browser;import eu.bitwalker.useragentutils.UserAgent;import eu.bitwalker.useragentutils.Version;/** * 操作系统工具类 *  * @author shenl * */public class OSUtil {	/**	 * 获取操作系统名称	 * 	 * @return	 */	public static boolean isWindows() {		String os = System.getProperty("os.name");		if (os != null && os.startsWith("Windows")) {			return true;		} else {			return false;		}	}	/**	 * 获取临时路径	 * 	 * @return	 */	public static String getTempDir() {		return System.getProperty("user.home");	}	/**	 * 获取本地ip	 * 	 * @return	 */	public static String getLocalIp() {		InetAddress addr;		try {			addr = InetAddress.getLocalHost();			return addr.getHostAddress();// 获得本机IP		} catch (UnknownHostException e) {			e.printStackTrace();		}		return null;	}	/**	 * 获取操作系统	 * 	 * @param request	 * @return	 */	public static Map<String, String> getOsInfo(HttpServletRequest request) {		Map<String, String> os = new HashMap<String, String>();		String header = request.getHeader("user-agent");		if (header == null || header.equals("")) {			os.put("type", "");			os.put("version", "");			return os;		}		// 得到用户的操作系统		if (header.indexOf("NT 6.4") > 0 || header.indexOf("NT 10.0") > 0) {			os.put("type", "Windows");			os.put("version", "10");		} else if (header.indexOf("NT 5.2") > 0) {			os.put("type", "Windows");			os.put("version", "Server 2003");		} else if (header.indexOf("NT 5.1") > 0) {			os.put("type", "Windows");			os.put("version", "XP");		} else if (header.indexOf("NT 6.0") > 0) {			os.put("type", "Windows");			os.put("version", "Vista");		} else if (header.indexOf("NT 6.1") > 0) {			os.put("type", "Windows");			os.put("version", "7");		} else if (header.indexOf("NT 6.2") > 0) {			os.put("type", "Windows");			os.put("version", "8");		} else if (header.indexOf("NT 6.3") > 0) {			os.put("type", "Windows");			os.put("version", "9");		} else if (header.indexOf("NT 5") > 0) {			os.put("type", "Windows");			os.put("version", "2000");		} else if (header.indexOf("NT 4") > 0) {			os.put("type", "Windows");			os.put("version", "NT4");		} else if (header.indexOf("Me") > 0) {			os.put("type", "Windows");			os.put("version", "Me");		} else if (header.indexOf("98") > 0) {			os.put("type", "Windows");			os.put("version", "98");		} else if (header.indexOf("95") > 0) {			os.put("type", "Windows");			os.put("version", "95");		} else if (header.indexOf("Mac") > 0) {			os.put("type", "Mac");			os.put("version", "");		} else if (header.indexOf("Unix") > 0) {			os.put("type", "Unix");			os.put("version", "");		} else if (header.indexOf("Linux") > 0) {			os.put("type", "Linux");			os.put("version", "");		} else if (header.indexOf("SunOS") > 0) {			os.put("type", "SunOS");			os.put("version", "");		} else {			os.put("type", "Other");			os.put("version", "");		}		return os;	}	/**	 * 获取操作系统	 * 	 * @param request	 * @return	 */	public static Map<String, String> getOsInfo(String header) {		Map<String, String> os = new HashMap<String, String>();		if (header == null || header.equals("")) {			os.put("type", "未知");			os.put("version", "未知");			return os;		}		// 得到用户的操作系统		if (header.indexOf("NT 6.4") > 0 || header.indexOf("NT 10.0") > 0) {			os.put("type", "Windows");			os.put("version", "10");		} else if (header.indexOf("NT 5.2") > 0) {			os.put("type", "Windows");			os.put("version", "Server 2003");		} else if (header.indexOf("NT 5.1") > 0) {			os.put("type", "Windows");			os.put("version", "XP");		} else if (header.indexOf("NT 6.0") > 0) {			os.put("type", "Windows");			os.put("version", "Vista");		} else if (header.indexOf("NT 6.1") > 0) {			os.put("type", "Windows");			os.put("version", "7");		} else if (header.indexOf("NT 6.2") > 0) {			os.put("type", "Windows");			os.put("version", "8");		} else if (header.indexOf("NT 6.3") > 0) {			os.put("type", "Windows");			os.put("version", "9");		} else if (header.indexOf("NT 5") > 0) {			os.put("type", "Windows");			os.put("version", "2000");		} else if (header.indexOf("NT 4") > 0) {			os.put("type", "Windows");			os.put("version", "NT4");		} else if (header.indexOf("Me") > 0) {			os.put("type", "Windows");			os.put("version", "Me");		} else if (header.indexOf("98") > 0) {			os.put("type", "Windows");			os.put("version", "98");		} else if (header.indexOf("95") > 0) {			os.put("type", "Windows");			os.put("version", "95");		} else if (header.indexOf("Mac") > 0) {			os.put("type", "Mac");			os.put("version", "");		} else if (header.indexOf("Unix") > 0) {			os.put("type", "Unix");			os.put("version", "");		} else if (header.indexOf("Linux") > 0) {			os.put("type", "Linux");			os.put("version", "");		} else if (header.indexOf("SunOS") > 0) {			os.put("type", "SunOS");			os.put("version", "");		} else {			os.put("type", "Other");			os.put("version", "");		}		return os;	}	/**	 * 浏览器及浏览器版本信息	 * 	 * @param request	 * @return	 */	public static Map<String, String> getBrowserInfo(HttpServletRequest request) {		Map<String, String> browseMap = new HashMap<String, String>();		Browser browser = UserAgent.parseUserAgentString(				request.getHeader("User-Agent")).getBrowser();		Version version = browser.getVersion(request.getHeader("User-Agent"));		browseMap.put("type", browser.getName());		browseMap.put("version", version.getVersion());		return browseMap;	}	/**	 * 浏览器及浏览器版本信息	 * 	 * @param request	 * @return	 */	public static Map<String, String> getBrowserInfo(String header) {		Map<String, String> browseMap = new HashMap<String, String>();		if (header == null || header.equals("")) {			browseMap.put("type", "未知");			browseMap.put("version", "未知");			return browseMap;		}				Browser browser = UserAgent.parseUserAgentString(header).getBrowser();		Version version = browser.getVersion(header);		browseMap.put("type", browser.getName());		if (version != null)			browseMap.put("version", version.getVersion());		else			browseMap.put("version", "未知");		return browseMap;	}	public static String getIp(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip != null && ip.length() != 0 && !"unknown".equalsIgnoreCase(ip)) {			// 多次反向代理后会有多个ip值，第一个ip才是真实ip			if (ip.indexOf(",") != -1) {				ip = ip.split(",")[0];			}		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_CLIENT_IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_X_FORWARDED_FOR");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("X-Real-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		return ip;	}}