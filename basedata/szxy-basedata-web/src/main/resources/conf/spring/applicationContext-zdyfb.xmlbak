<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
	http://www.springframework.org/schema/data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd 
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring 
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="true">

	<description>Spring公共配置文件</description>

	<!-- <context:annotation-config /> -->

	<!-- 属性文件位置 -->
	<context:property-placeholder location="classpath*:conf/*.properties" />
	<!-- ===================================================================== -->
	<!-- 注入配置 -->
	<context:component-scan base-package="zd.yfb">
		<context:include-filter expression="zd\.yfb\.[^.]+(dao|service|component|config)"
			type="regex" />
	</context:component-scan>
	<!-- 注入配置 -->

	<!-- 需要在 <beans> 标签中增加对 jpa 命名空间的引用 <jpa:repositories base-package="zd.yfb.*.dao" 
		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory" 
		transaction-manager-ref="txManagerJap" /> -->
	<jpa:repositories base-package="zd.yfb.**.dao"
		repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactoryzd"
		transaction-manager-ref="txManagerJapzd" />
	<!-- 使用Druid连接池 -->
	<bean id="dataSource_masterzd" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close"> <!-- 基本属性 url、user、password -->
		<property name="url" value="${hibernate.connection.urlzd}" />
		<property name="username" value="${hibernate.connection.usernamezd}" />
		<property name="password" value="${hibernate.connection.passwordzd}" />
		<property name="connectionProperties" value="${hibernate.connection.driver_classzd}"></property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- <property name="validationQuery" value="SELECT 'x'" /> -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>
	<bean id="dataSource_slavezd" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close"> <!-- 基本属性 url、user、password -->
		<property name="url" value="${hibernate.connection.url.slavezd}" />
		<property name="username" value="${hibernate.connection.username.slavezd}" />
		<property name="password" value="${hibernate.connection.password.slavezd}" />
		<property name="connectionProperties" value="${hibernate.connection.driver_classzd}"></property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- <property name="validationQuery" value="SELECT 'x'" /> -->
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 数据库读写分离配置 -->
	<bean id="dataSourcezd" class="com.taobao.tddl.jdbc.group.SpringTGroupDataSource"
		init-method="init">
		<property name="dataSources"
			value="dataSource_masterzd:w1r0, dataSource_slavezd:w0r1" />
		<property name="type" value="MYSQL" />
	</bean>

	<!-- 动态dataSource -->
	<bean id="dataSourceJapzd" class="net.zdsoft.framework.config.RwDataRoutingDataSource">
		<property name="slaves" value="2" /><!-- 允许read操作的节点个数 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="WRITE" value-ref="dataSource_masterzd" />
				<entry key="READ" value-ref="dataSource_slavezd" />
				<!-- 允许部分read到slave上 -->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_slavezd" /><!-- 
			or master -->
	</bean>

	<!-- 支持事务管理 -->
	<bean id="txManagerzd"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourcezd" />
	</bean>

	<!-- 用于指定持久化实现厂商类 -->
	<bean id="persistenceProviderzd" class="org.hibernate.ejb.HibernatePersistence" />
	<!-- 用于设置JPA实现厂商的特定属性 -->
	<bean id="jpaVendorAdapterzd"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<!-- 枚举类 DB2, DERBY, H2, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, 
			SYBASE -->
		<property name="database" value="MYSQL" />
	</bean>

	<!-- AOP事务配置 -->
	<bean id="jdbcTransactionManagerzd"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourcezd" />
	</bean>
	<tx:advice id="defaultTxAdvicezd" transaction-manager="jdbcTransactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<!-- 任何类型的返回接口， Service类下的所有方法以及任何参数 -->
	<aop:config>
		<aop:pointcut id="defaultServiceOperationzd"
			expression="execution(* zd.yfb..*Service.*(..)) and !execution(* net..custom..*Service.*(..))" />
		<aop:advisor advice-ref="defaultTxAdvicezd" pointcut-ref="defaultServiceOperationzd" />
	</aop:config>

	<!-- JPA实体管理器工厂 -->
	<bean id="entityManagerFactoryzd"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSourceJapzd" />
		<property name="persistenceProvider" ref="persistenceProviderzd" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapterzd" />
		<property name="jpaDialect" ref="jpaDialectzd" />
		<property name="packagesToScan">
			<list>
				<value>zd.yfb.**.entity</value>
			</list>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialectzd}</prop>
				<prop key="hibernate.connection.driver_class">${hibernate.connection.provider_classzd}</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">18</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop><!-- validate -->
				<prop key="hibernate.ejb.naming_strategy">net.zdsoft.framework.config.WpImprovedNamingStrategy</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sqlzd}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sqlzd}</prop>
				<!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> -->
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
	</bean>

	<!-- 用于指定一些高级特性 -->
	<bean id="jpaDialectzd" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />

	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"></bean>

	<!-- 注解式事务 -->
	<tx:annotation-driven transaction-manager="txManagerJapzd" />
	<tx:annotation-driven transaction-manager="txManagerzd" />

	<tx:advice id="txAdvicezd" transaction-manager="txManagerJapzd">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义一个切入点，使事务在它的切入点内有效 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* zd.yfb..*Service.*(..)) and !execution(* net..custom..*Service.*(..))"
			id="pointcutzd" />
		<aop:advisor pointcut-ref="pointcutzd" advice-ref="txAdvicezd" />
	</aop:config>

	<!-- 事务管理器 -->
	<bean id="txManagerJapzd" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryzd" />
	</bean>

	<aop:config>
		<aop:pointcut id="crudMethodszd"
			expression="execution(* zd.yfb..*Service.*(..)) and !execution(* net..custom..*Service.*(..))" />
		<aop:advisor advice-ref="defaultTxAdvicezd" pointcut-ref="crudMethodszd" />
	</aop:config>
</beans>
