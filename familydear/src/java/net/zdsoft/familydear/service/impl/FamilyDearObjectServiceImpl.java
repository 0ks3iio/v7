package net.zdsoft.familydear.service.impl;import net.zdsoft.basedata.entity.Teacher;import net.zdsoft.basedata.remote.service.TeacherRemoteService;import net.zdsoft.basedata.remote.utils.BusinessUtils;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.familydear.common.FamDearConstant;import net.zdsoft.familydear.dao.FamilyDearObjectDao;import net.zdsoft.familydear.dto.CadresRelationSearchDto;import net.zdsoft.familydear.entity.FamilyDearMember;import net.zdsoft.familydear.entity.FamilyDearObject;import net.zdsoft.familydear.entity.FamilyDearServant;import net.zdsoft.familydear.service.FamilyDearMemberService;import net.zdsoft.familydear.service.FamilyDearObjectService;import net.zdsoft.familydear.service.FamilyDearServantService;import net.zdsoft.familydear.util.FamilyDearImportUtil;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.framework.entity.Json;import net.zdsoft.framework.entity.LoginInfo;import net.zdsoft.framework.entity.Pagination;import net.zdsoft.framework.entity.TR;import net.zdsoft.framework.utils.SUtils;import net.zdsoft.framework.utils.UuidUtils;import net.zdsoft.framework.utils.Validators;import net.zdsoft.system.entity.mcode.McodeDetail;import net.zdsoft.system.remote.service.McodeRemoteService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Order;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import java.util.stream.Collectors;/** * family_dear_object  * @author  *  */@Service("familyDearObjectServiceImpl")public class FamilyDearObjectServiceImpl extends BaseServiceImpl<FamilyDearObject,String> implements FamilyDearObjectService{	@Autowired	private FamilyDearObjectDao familyDearObjectDao;	@Autowired	private TeacherRemoteService teacherRemoteService;	@Autowired	private FamilyDearServantService familyDearServantService;	@Autowired	private FamilyDearMemberService familyDearMemberService;	@Autowired	private McodeRemoteService mcodeRemoteService;	@Override	protected BaseJpaRepositoryDao<FamilyDearObject, String> getJpaDao() {		return familyDearObjectDao;	}	@Override	protected Class<FamilyDearObject> getEntityClass() {		return FamilyDearObject.class;	}	@Override	public List<FamilyDearObject> getObjectsByCondiston( final CadresRelationSearchDto dto , String unitId, String[] teacherIds1 , Pagination page) {		List<FamilyDearObject> list=new ArrayList<FamilyDearObject>();		List<Teacher> teacherList = new ArrayList<>();		if (StringUtils.isEmpty(dto.getTeacherId()) && StringUtils.isNotEmpty(dto.getCadreName())) {			try {				teacherList = SUtils.dt(teacherRemoteService.findByTeacherNameLike(java.net.URLDecoder.decode(dto.getCadreName(), "UTF-8")), Teacher.class);			} catch (UnsupportedEncodingException e) {				e.printStackTrace();			}			if (CollectionUtils.isNotEmpty(teacherList)) {				Iterator<Teacher> iterator = teacherList.iterator();				while (iterator.hasNext()) {					Teacher tea = iterator.next();					if (!unitId.equals(tea.getUnitId())) {						iterator.remove();					}				}			}			if (CollectionUtils.isEmpty(teacherList)) {				return new ArrayList<>();			}		}		Set<String> teacherIdSet = new HashSet<>();		if (StringUtils.isNotEmpty(dto.getTeacherId())) {			teacherIdSet.add(dto.getTeacherId());		}else{			if (CollectionUtils.isNotEmpty(teacherList)) {				teacherIdSet = teacherList.stream().map(Teacher::getId).collect(Collectors.toSet());			}		}//		List<FamilyDearServant> servants = familyDearServantService.findListByIn("teacherId", teacherIdSet.toArray());//		  Set<String> objIdSet = new HashSet<>();//		if (CollectionUtils.isNotEmpty(servants)) {//			objIdSet = servants.stream().map(FamilyDearServant::getObjectId).collect(Collectors.toSet());//		}		final  Set<String> teacherIds = teacherIdSet;		Pageable pageable = Pagination.toPageable(page);		Specification specification = new Specification<FamilyDearObject>() {			@Override			public Predicate toPredicate(Root<FamilyDearObject> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {				List<Predicate> predicates = new ArrayList<>();				if (StringUtils.isNotEmpty(dto.getObjName())) {					try {						predicates.add(criteriaBuilder.like(root.get("name").as(String.class), "%" + java.net.URLDecoder.decode(dto.getObjName(), "UTF-8") + "%"));					} catch (UnsupportedEncodingException e) {						e.printStackTrace();					}				}				if (StringUtils.isNotEmpty(dto.getVillageName())) {					predicates.add(criteriaBuilder.like(root.get("village").as(String.class) ,"%" + dto.getVillageName() + "%"));				}				if (StringUtils.isNotEmpty(dto.getType())) {					predicates.add(criteriaBuilder.like(root.get("type").as(String.class), "%" +dto.getType()+ "%"));				}				if (StringUtils.isNotEmpty(dto.getDeptId())) {					if (teacherIds1!=null&&teacherIds1.length>0) {						CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("teacherId").as(String.class));						for (int i = 0; i < teacherIds1.length; i++) {							in.value(teacherIds1[i]);						}						predicates.add(in);					}//					predicates.add(criteriaBuilder.equal(root.get("deptId").as(String.class), dto.getDeptId()));				}				if (StringUtils.isNotEmpty(dto.getLabel())) {					predicates.add(criteriaBuilder.equal(root.get("state").as(String.class), dto.getLabel()));				}else{					CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("state").as(String.class));					in.value(FamDearConstant.OBJECT_STATE_INITIA);					in.value(FamDearConstant.OBJECT_STATE_RELATIONED);					predicates.add(in);				}				predicates.add(criteriaBuilder.equal(root.get("unitId").as(String.class), unitId));				if (CollectionUtils.isNotEmpty(teacherIds)) {					CriteriaBuilder.In<String> in = criteriaBuilder.in(root.get("teacherId").as(String.class));					for (String id : teacherIds) {						in.value(id);					}					predicates.add(in);				}//				Predicate[] p = new Predicate[predicates.size()];//				criteriaQuery.where(predicates.toArray(p));//				return criteriaQuery.getGroupRestriction();				List<Order> orderList = new ArrayList<>();				orderList.add(criteriaBuilder.desc(root.get("creationTime").as(Date.class)));				orderList.add(criteriaBuilder.asc(root.get("id").as(String.class)));				criteriaQuery.where(predicates.toArray(new Predicate[0])).orderBy(orderList);				return criteriaQuery.getRestriction();			}		};		Page<FamilyDearObject> findAll =familyDearObjectDao.findAll(specification  ,pageable);		page.setMaxRowCount((int) findAll.getTotalElements());		return findAll.getContent();	}	@Override	public void saveCadre(String objId, String teacherId) {		FamilyDearObject dearObject = this.findOne(objId);		dearObject.setTeacherId(teacherId);		dearObject.setState(FamDearConstant.OBJECT_STATE_RELATIONED);		Teacher teacher = teacherRemoteService.findOneObjectById(teacherId);//		if(StringUtils.isBlank(familyDearObject.getDeptId())){//			familyDearObject.setDeptId(getLoginInfo().getDeptId());//		}		dearObject.setDeptId(teacher.getDeptId());		this.save(dearObject);		FamilyDearServant servant = new FamilyDearServant();		servant.setId(UuidUtils.generateUuid());		servant.setCreationTime(new Date());		servant.setObjectId(objId);		servant.setTeacherId(teacherId);		servant.setIsDeleted(FamDearConstant.HAVE_RELATION);		familyDearServantService.save(servant);	}	public String saveImportDate(List<String[]> rowDatas, LoginInfo loginInfo) {		//错误数据序列号		int sequence = 0;		List<String[]> errorDataList=new ArrayList<String[]>();		if(CollectionUtils.isEmpty(rowDatas)){			return FamilyDearImportUtil.errorResult("0", "", "", "没有导入数据",					sequence, 0, 0, errorDataList);		}		Map<String, Map<String, String>> map = getMcodeMap();		Map<String, String> typeMap = map.get("DM-JQLB");		Map<String, String> sexMap = map.get("DM-XB");		Map<String, String> nationMap = map.get("DM-MZ");		Map<String, String> villageMap = map.get("DM-XJJQC");//		Map<String, String> backGroundMap = map.get("DM-ZZMM");		List<String> identityCardList = new ArrayList<>();		for(int m=0;m<rowDatas.size();m++){			String[] datas= rowDatas.get(m);			String identityCard = StringUtils.trimToEmpty(datas[4]);			try {				identityCard = FamilyDearImportUtil.verifyType("身份证号",identityCard,"String-18",false,null,null);			} catch (Exception e) {				e.printStackTrace();				continue;			}			String reMessage = BusinessUtils.validateIdentityCard(identityCard, false);			if (StringUtils.isEmpty(reMessage)) {				identityCardList.add(identityCard);			}		}		List<FamilyDearObject> objectList = findListByIn("identityCard", identityCardList.toArray());		Map<String, FamilyDearObject> identityMap = new HashMap<>();		if (CollectionUtils.isNotEmpty(objectList)) {//			identityMap = objectList.stream().collect(Collectors.toMap(FamilyDearObject::getIdentityCard, Function.identity()));			for (FamilyDearObject dearObject : objectList) {				identityMap.put(dearObject.getIdentityCard(), dearObject);			}		}		List<FamilyDearObject> familyDearObjectList = new ArrayList<>();		int i=1;		int totalSize = rowDatas.size();		int successCount=0;		for(int m=0;m<rowDatas.size();m++){			i++;			int j=sequence+1;			try {				FamilyDearObject familyDearObject = new FamilyDearObject();				String[] datas= rowDatas.get(m);				String village = StringUtils.trimToEmpty(datas[0]);				village = FamilyDearImportUtil.verifyType("结亲村",village,"String-200",true,null,null);				familyDearObject.setVillage(village);//				String unitName = StringUtils.trimToEmpty(datas[1]);//				unitName = FamilyDearImportUtil.verifyType("单位",unitName,"String-200",true,null,null);//				familyDearObject.setUnitName(unitName);//				String types = StringUtils.trimToEmpty(datas[1]);				types = FamilyDearImportUtil.verifyType("类别",types,"String-200",true,null,null);				types = types.replaceAll("，", ",");				String[] typeArr = types.split(",");				StringBuilder builder = new StringBuilder();				for (String str : typeArr) {					String val = typeMap.get(str.trim());					builder.append(val + ",");				}				if(!builder.toString().contains("null")&&builder.length()>0) {					familyDearObject.setType(builder.substring(0, builder.length() - 1));				}else {					String[] errorData=new String[4];					sequence++;					errorData[0]= String.valueOf(j);					errorData[1]="第"+i+"行";					errorData[2]=types;					errorData[3]="结亲对象类别不符合格式！";					errorDataList.add(errorData);					continue;				}//				String name = StringUtils.trimToEmpty(datas[2]);				name = FamilyDearImportUtil.verifyType("结亲对象",name,"String-100",true,null,null);				familyDearObject.setName(name);//				String sex = StringUtils.trimToEmpty(datas[3]);				sex = FamilyDearImportUtil.verifyType("性别",sex,"String-200",false,null,null);                if (StringUtils.isNotEmpty(sex)) {                    String sexVal = sexMap.get(sex);                    familyDearObject.setSex(sexVal);                }				String identityCard = StringUtils.trimToEmpty(datas[4]);				identityCard = FamilyDearImportUtil.verifyType("身份证号",identityCard,"String-18",false,null,null);                if (StringUtils.isNotEmpty(identityCard)) {                    String reMessage = BusinessUtils.validateIdentityCard(identityCard, false);                    if (StringUtils.isNotEmpty(reMessage)) {                        throw new RuntimeException("身份证件号不符合身份证规则");                    }                    FamilyDearObject obj = identityMap.get(identityCard);                    if (obj != null) {//					throw new RuntimeException("该身份证号已存在！");                        String[] errorData=new String[4];                        sequence++;                        errorData[0]= String.valueOf(j);                        errorData[1]="第"+i+"行";                        errorData[2]=identityCard;                        errorData[3]="该身份证号已存在！";                        errorDataList.add(errorData);                        continue;                    }                    familyDearObject.setIdentityCard(identityCard);                }				String nation = StringUtils.trimToEmpty(datas[5]);				nation = FamilyDearImportUtil.verifyType("民族",nation,"String-200",true,null,null);				String nationVal = nationMap.get(nation);				familyDearObject.setNation(nationVal);//				String background = StringUtils.trimToEmpty(datas[7]);//				background = FamilyDearImportUtil.verifyType("政治面貌",background,"String-200",true,null,null);////				String backgroundVal = backGroundMap.get(background);//				familyDearObject.setBackground(backgroundVal);				String mobilePhone = StringUtils.trimToEmpty(datas[6]);				mobilePhone = FamilyDearImportUtil.verifyType("手机号码",mobilePhone,"String-30",false,null,null);                if (StringUtils.isNotEmpty(mobilePhone)) {                    if (Validators.isMobile(mobilePhone.trim())) {                        familyDearObject.setMobilePhone(mobilePhone);                    }else{//					throw new RuntimeException("手机号码不符合规则！");                        String[] errorData=new String[4];                        sequence++;                        errorData[0]= String.valueOf(j);                        errorData[1]="第"+i+"行";                        errorData[2]=mobilePhone;                        errorData[3]="手机号码不符合规则！";                        errorDataList.add(errorData);                        continue;                    }                }				String homeAddress = StringUtils.trimToEmpty(datas[7]);				homeAddress = FamilyDearImportUtil.verifyType("家庭住址",homeAddress,"String-300",true,null,null);				familyDearObject.setHomeAddress(homeAddress);				String remark = StringUtils.trimToEmpty(datas[8]);				remark = FamilyDearImportUtil.verifyType("备注",remark,"String-500",false,null,null);				familyDearObject.setRemark(remark);				successCount++;				familyDearObjectList.add(familyDearObject);			}catch (RuntimeException re){				re.printStackTrace();				FamilyDearImportUtil.addError(j+"", "第"+i+"行", "", re.getMessage(), sequence, errorDataList);				continue;			} catch(Exception e) {				e.printStackTrace();				FamilyDearImportUtil.addError(j+"", "第"+i+"行", "", "数据整理出错。", sequence, errorDataList);				continue;			}		}		if (CollectionUtils.isNotEmpty(familyDearObjectList)) {			for (FamilyDearObject familyDearObject : familyDearObjectList) {				familyDearObject.setVillageValue(villageMap.get(familyDearObject.getVillage()));				familyDearObject.setUnitId(loginInfo.getUnitId());//				familyDearObject.setDeptId(loginInfo.getDeptId());				familyDearObject.setId(UuidUtils.generateUuid());				familyDearObject.setCreationTime(new Date());				familyDearObject.setState(FamDearConstant.OBJECT_STATE_INITIA);			}			saveAll(familyDearObjectList.toArray(new FamilyDearObject[0]));		}		return result(totalSize,successCount,totalSize-successCount,errorDataList);	}	private String  result(int totalCount ,int successCount , int errorCount ,List<String[]> errorDataList){		Json importResultJson=new Json();		importResultJson.put("totalCount", totalCount);		importResultJson.put("successCount", successCount);		importResultJson.put("errorCount", errorCount);		importResultJson.put("errorData", errorDataList);		return importResultJson.toJSONString();	}	private Map<String, Map<String, String>> getMcodeMap() {		String[] mcodes = {"DM-XB","DM-MZ", "DM-ZZMM","DM-JQLB","DM-XJJQC"};		List<McodeDetail> mds = SUtils.dt(mcodeRemoteService.findByMcodeIds(mcodes), new TR<List<McodeDetail>>() {} );		Map<String, Map<String, String>> map = new HashMap<>();		for (McodeDetail detail : mds) {			Map<String, String> mcodeContentMap = map.get(detail.getMcodeId());			if (mcodeContentMap == null) {				mcodeContentMap = new HashMap<>();				map.put(detail.getMcodeId(), mcodeContentMap);			}			mcodeContentMap.put(detail.getMcodeContent(), detail.getThisId());		}		return map;	}	@Override	public void saveReleaseRemark(String remark, String[] objIds) {		List<FamilyDearObject> dearObjectList = findListByIds(objIds);		for (FamilyDearObject familyDearObject : dearObjectList) {			familyDearObject.setTeacherId(null);			familyDearObject.setDeptId(null);			familyDearObject.setState(FamDearConstant.OBJECT_STATE_INITIA);		}		this.saveAll(dearObjectList.toArray(new FamilyDearObject[0]));		Set<String> objIdSet = dearObjectList.stream().map(FamilyDearObject::getId).collect(Collectors.toSet());		List<FamilyDearServant> servantList = familyDearServantService.getListByObjIds(objIdSet.toArray(new String[0]), FamDearConstant.HAVE_RELATION);		if (CollectionUtils.isNotEmpty(servantList)) {			for (FamilyDearServant servant : servantList) {				servant.setIsDeleted(FamDearConstant.RELEASE_RELATION);				servant.setRemark(remark);				servant.setModifyTime(new Date());			}			familyDearServantService.saveAll(servantList.toArray(new FamilyDearServant[0]));		}	}	@Override	public void saveFamilyMember(FamilyDearObject familyDearObject) {		String id = familyDearObject.getId();		List<FamilyDearMember> memberList = familyDearObject.getFamilyTempList();		List<FamilyDearMember> list = new ArrayList<>();		if (CollectionUtils.isEmpty(memberList)) {			return;		}		for (FamilyDearMember familyDearMember : memberList) {			if (familyDearMember != null & StringUtils.isNotEmpty(familyDearMember.getName())) {				if (StringUtils.isNotEmpty(familyDearMember.getId())) {					familyDearMember.setModifyTime(new Date());				}	else{					familyDearMember.setId(UuidUtils.generateUuid());					familyDearMember.setObjectId(id);					familyDearMember.setCreationTime(new Date());				}				list.add(familyDearMember);			}		}		familyDearMemberService.saveAll(list.toArray(new FamilyDearMember[0]));	}	@Override	public void updateFlozenObject(String[] objIds, String state) {		List<FamilyDearObject> dearObjectList = findListByIds(objIds);		for (FamilyDearObject familyDearObject : dearObjectList) {			familyDearObject.setState(state);			familyDearObject.setModifyTime(new Date());		}		this.saveAll(dearObjectList.toArray(new FamilyDearObject[0]));	}	@Override	public List<FamilyDearObject> findByVillageName(String villageName) {		return familyDearObjectDao.findByVillageName(villageName);	}	@Override	public List<FamilyDearObject> getDearObjByIdentityCard(String identitycard, String id) {		return familyDearObjectDao.getDearObjByIdentityCard(identitycard,id);	}	@Override	public List<FamilyDearObject> getAllByidsAndState(String[] ids, String state) {		return familyDearObjectDao.getAllByidsAndState(ids,state);	}}