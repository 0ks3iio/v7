package net.zdsoft.stutotality.data.service.impl;import net.zdsoft.basedata.entity.Student;import net.zdsoft.basedata.remote.service.StudentRemoteService;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.framework.entity.Json;import net.zdsoft.framework.entity.TR;import net.zdsoft.framework.utils.EntityUtils;import net.zdsoft.framework.utils.SUtils;import net.zdsoft.framework.utils.UuidUtils;import net.zdsoft.stutotality.data.dao.StutotalityStuRewardDao;import net.zdsoft.stutotality.data.entity.StutotalityReward;import net.zdsoft.stutotality.data.entity.StutotalityStuReward;import net.zdsoft.stutotality.data.service.StutotalityRewardService;import net.zdsoft.stutotality.data.service.StutotalityStuRewardService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;/** * stutotality_stu_reward  * @author  *  */@Service("stutotalityStuRewardService")public class StutotalityStuRewardServiceImpl extends BaseServiceImpl<StutotalityStuReward,String> implements StutotalityStuRewardService{	@Autowired	private StutotalityStuRewardDao stutotalityStuRewardDao;    @Autowired    private StudentRemoteService studentRemoteService;    @Autowired    private StutotalityRewardService stutotalityRewardService;    @Override	protected BaseJpaRepositoryDao<StutotalityStuReward, String> getJpaDao() {		return stutotalityStuRewardDao;	}	@Override	protected Class<StutotalityStuReward> getEntityClass() {		return StutotalityStuReward.class;	}	@Override	public List<StutotalityStuReward> getByAcadyearAndSemesterAndUnitIdAndStudentId(String year, String semester, String unitId, String studentId) {		return stutotalityStuRewardDao.getByAcadyearAndSemesterAndUnitIdAndStudentId(year, semester, unitId, studentId);	}	@Override	public List<StutotalityStuReward> getByAcadyearAndSemesterAndUnitIdAndStudentIdWithMaster(String year, String semester, String unitId, String studentId) {		return stutotalityStuRewardDao.getByAcadyearAndSemesterAndUnitIdAndStudentId(year, semester, unitId, studentId);	}    @Override    public String acadListImport(String unitId, List<String[]> datas, String acadyear, String semester,String classId) {        Json importResultJson=new Json();        List<String[]> errorDataList=new ArrayList<String[]>();        int successCount  =0;        String[] errorData=null;        Set<String> stuCodeSet = new HashSet<String>();        List<StutotalityStuReward> insertList=new ArrayList<>();        for(String[] arr : datas){            stuCodeSet.add(arr[0]);        }        if(stuCodeSet.size() == 0){            errorData = new String[4];            errorData[0]=errorDataList.size()+1+"";            errorData[1]="";            errorData[2]="";            errorData[3]="请更新模板或检查数据是否为空";            errorDataList.add(errorData);            importResultJson.put("totalCount", errorDataList.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        }else {            List<Student> studentList = SUtils.dt(studentRemoteService.findByClassIds(new String[]{classId}), new TR<List<Student>>() {});            Set<String> Ids = EntityUtils.getSet(studentList,Student::getId);            List<StutotalityReward> stuRewards   = stutotalityRewardService.findByUnitIdAndAcadyearAndSemester(unitId, acadyear, semester);            Map<String, String> stuCodeNameMap = new HashMap<String, String>();            Map<String, String> stuCodeIdMap = new HashMap<String, String>();            List<Student> stuList = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(unitId, stuCodeSet.toArray(new String[0])), new TR<List<Student>>() {});            for(Student stu : stuList){                stuCodeNameMap.put(stu.getStudentCode(), stu.getStudentName());                stuCodeIdMap.put(stu.getStudentCode(), stu.getId());            }            for(String[] arr : datas){                StutotalityStuReward reward = new StutotalityStuReward();                if(StringUtils.isBlank(arr[0])){                    errorData = new String[4];                    errorData[0]=errorDataList.size()+1+"";                    errorData[1]="学号";                    errorData[2]="";                    errorData[3]="学号不能为空";                    errorDataList.add(errorData);                    continue;                }                if(StringUtils.isBlank(arr[1])){                    errorData = new String[4];                    errorData[0]=errorDataList.size()+1+"";                    errorData[1]="学生姓名";                    errorData[2]="";                    errorData[3]="学生姓名不能为空";                    errorDataList.add(errorData);                    continue;                }else{                    if(StringUtils.isBlank(stuCodeNameMap.get(arr[0]))){                        errorData = new String[4];                        errorData[0]=errorDataList.size()+1+"";                        errorData[1]="学号";                        errorData[2]=arr[1];                        errorData[3]="不存在该学号所属的学生";                        errorDataList.add(errorData);                        continue;                    }else{                        if(StringUtils.isNotBlank(arr[1]) && !arr[1].equals(stuCodeNameMap.get(arr[0]))){                            errorData = new String[4];                            errorData[0]=errorDataList.size()+1+"";                            errorData[1]="学号";                            errorData[2]="姓名："+arr[1]+"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学号："+arr[0];                            errorData[3]="学生姓名与该学号不匹配";                            errorDataList.add(errorData);                            continue;                        }                    }                }                if(CollectionUtils.isNotEmpty(Ids)){                    if(!Ids.contains(stuCodeIdMap.get(arr[0]))){                        errorData = new String[4];                        errorData[0]=errorDataList.size()+1+"";                        errorData[1]="学号";                        errorData[2]=arr[0];                        errorData[3]="导入非当前班级学生";                        errorDataList.add(errorData);                        continue;                    }                }                if(StringUtils.isBlank(arr[2])){                    errorData = new String[4];                    errorData[0]=errorDataList.size()+1+"";                    errorData[1]="获奖级别";                    errorData[2]="";                    errorData[3]="获奖级别不能为空";                    errorDataList.add(errorData);                    continue;                }else{                    if(CollectionUtils.isNotEmpty(stuRewards)){                        Set<String> rewardName= EntityUtils.getSet(stuRewards, StutotalityReward::getRewardName);                        if(!rewardName.contains(arr[2])){                            errorData = new String[4];                            errorData[0]=errorDataList.size()+1+"";                            errorData[1]="获奖级别";                            errorData[2]=arr[2];                            errorData[3]="级别名称不匹配";                            errorDataList.add(errorData);                            continue;                        }                    }                }                //通过学号 拿到学生ID                String studentId = stuCodeIdMap.get(arr[0]);                reward.setId(UuidUtils.generateUuid());                reward.setUnitId(unitId);                reward.setAcadyear(acadyear);                reward.setSemester(semester);                reward.setStudentId(studentId);                for (StutotalityReward stuReward : stuRewards) {                    if(stuReward.getRewardName().equals(arr[2])){                        reward.setRewardId(stuReward.getId());                        reward.setStarNum(stuReward.getStarNumber());                    }                }                reward.setDescription(arr[3]);                reward.setCreationTime(new Date());                reward.setModifyTime(new Date());                insertList.add(reward);                successCount++;            }            saveAll(insertList.toArray(new StutotalityStuReward[0]));            importResultJson.put("totalCount", datas.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        }    }}