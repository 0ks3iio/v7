package net.zdsoft.stutotality.data.service.impl;import net.zdsoft.basedata.entity.*;import net.zdsoft.basedata.remote.service.*;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.framework.entity.LoginInfo;import net.zdsoft.framework.entity.TR;import net.zdsoft.framework.utils.EntityUtils;import net.zdsoft.framework.utils.SUtils;import net.zdsoft.framework.utils.StringUtils;import net.zdsoft.framework.utils.UuidUtils;import net.zdsoft.stutotality.data.dao.StutotalityStuResultDao;import net.zdsoft.stutotality.data.entity.StutotalityHealthOption;import net.zdsoft.stutotality.data.entity.StutotalityItem;import net.zdsoft.stutotality.data.entity.StutotalityStuResult;import net.zdsoft.stutotality.data.service.StutotalityHealthOptionService;import net.zdsoft.stutotality.data.service.StutotalityItemService;import net.zdsoft.stutotality.data.service.StutotalityStuResultService;import net.zdsoft.stutotality.data.util.StutotalityConstant;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.*;import java.util.stream.Collectors;import static net.zdsoft.stutotality.data.constant.ResultType.Type2;import static net.zdsoft.stutotality.data.constant.ResultType.Type3;import static net.zdsoft.stutotality.data.util.StutotalityResultImportUitls.result;/** * stutotality_stu_result  * @author  *  */@Service("stutotalityStuResultService")public class StutotalityStuResultServiceImpl  extends BaseServiceImpl<StutotalityStuResult,String> implements StutotalityStuResultService{	@Autowired	private StutotalityStuResultDao stutotalityStuResultDao;	@Autowired	StudentRemoteService studentRemoteService;	@Autowired	SemesterRemoteService semesterRemoteService;	@Autowired	CourseRemoteService courseRemoteService;	@Autowired	StutotalityHealthOptionService stutotalityHealthOptionService;	@Autowired	ClassRemoteService classRemoteService;	@Autowired	GradeRemoteService gradeRemoteService;	@Autowired	StutotalityItemService stutotalityItemService;	@Autowired	ClassTeachingRemoteService classTeachingRemoteService;	@Autowired	CustomRoleRemoteService customRoleRemoteService;		@Override	protected BaseJpaRepositoryDao<StutotalityStuResult, String> getJpaDao() {		return stutotalityStuResultDao;	}	@Override	protected Class<StutotalityStuResult> getEntityClass() {		return StutotalityStuResult.class;	}	@Override	public List<StutotalityStuResult> findListByOptionIds(String year,String semester,String[] studentIds,String[] optionIds,String resultType) {		return stutotalityStuResultDao.findListByStudentIdsAndOptionIdsAndType(year,semester,studentIds,optionIds,resultType);	}	@Override	public List<StutotalityStuResult> findListByOptionIdsWithMaster(String year,String semester,String[] studentIds,String[] optionIds,String resultType) {		return stutotalityStuResultDao.findListByStudentIdsAndOptionIdsAndType(year,semester,studentIds,optionIds,resultType);	}	@Override	public List<StutotalityStuResult> findListByItemIds(String year,String semester,String studentId, String[] itemIds,String resultType) {		if(StringUtils.isNotBlank(studentId)) {			return stutotalityStuResultDao.findListByItemIdsAndStudentIdAndType(year,semester,studentId, itemIds,resultType);		}else {			return stutotalityStuResultDao.findListByItemIdsAndType(year,semester,itemIds,resultType);		}	}	@Override	public List<StutotalityStuResult> findListByItemIdsWithMaster(String year,String semester,String studentId, String[] itemIds,String resultType) {		if(StringUtils.isNotBlank(studentId)) {			return stutotalityStuResultDao.findListByItemIdsAndStudentIdAndType(year,semester,studentId, itemIds,resultType);		}else {			return stutotalityStuResultDao.findListByItemIdsAndType(year,semester,itemIds,resultType);		}	}	@Override	public List<StutotalityStuResult> findByAcadyearAndSemesterAndUnitIdAndTypeWithMaster(String year, String semester, String unitId, String type,String studentId) {		if(StringUtils.isNotBlank(studentId)){			return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndTypeAndStudentId(year, semester, unitId, type, studentId);		}		return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndType(year, semester, unitId, type);	}	@Override	public List<StutotalityStuResult> findItemHealthIdAndOptionId(String year, String semester, String unitId, String type, String itemHealthId, String optionId) {		return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndTypeAndItemHealthIdAndOptionId(year, semester, unitId, type, itemHealthId, optionId);	}	@Override	public List<StutotalityStuResult> findItemHealthIdAndOptionIdWithMaster(String year, String semester, String unitId, String type, String itemHealthId, String optionId) {		return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndTypeAndItemHealthIdAndOptionId(year, semester, unitId, type, itemHealthId, optionId);	}	@Override	public List<StutotalityStuResult> findItemHealthId(String year, String semester, String unitId, String type, String itemHealthId) {		return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndTypeAndItemHealthId(year, semester, unitId, type, itemHealthId);	}	@Override	public List<StutotalityStuResult> findItemHealthIdWithMaster(String year, String semester, String unitId, String type, String itemHealthId) {		return stutotalityStuResultDao.findByAcadyearAndSemesterAndUnitIdAndTypeAndItemHealthId(year, semester, unitId, type, itemHealthId);	}	@Override	public List<StutotalityStuResult> findListByParms(String unitId,String acadyear,String semester,String studentId,String[] itemIds){		if(itemIds!=null && itemIds.length>0){			return stutotalityStuResultDao.findListByParms(unitId,acadyear,semester,studentId,itemIds);		}		return stutotalityStuResultDao.findListByParms(unitId,acadyear,semester,studentId);	}	public List<StutotalityStuResult> findListByStudentIds(String acadyear,String semester,String[] studentIds){		return stutotalityStuResultDao.findListByStudentIds(acadyear,semester,StutotalityConstant.RESULT_TYPE_HEALTH,studentIds);	}	public List<StutotalityStuResult> findListByStudentIds(String acadyear,String semester,String[] studentIds,String[] itemHealthIds){		if(studentIds!=null && studentIds.length>0){			return stutotalityStuResultDao.findListByStudentIds(acadyear,semester,studentIds,itemHealthIds);		}		return stutotalityStuResultDao.findListByItemHealthIds(acadyear,semester,itemHealthIds);	}	@Override	public void saveData(String unitId, String acadyear, String semester, Set<String> studentIds, String Type, List<StutotalityStuResult> list) {		if(CollectionUtils.isNotEmpty(studentIds)) {			stutotalityStuResultDao.deleteByStudentIds(unitId, acadyear, semester, studentIds.toArray(new String[0]), Type);		}		stutotalityStuResultDao.saveAll(list);	}	@Override	public void deleteByStudentIds(String unitId, String acadyear, String semester, String[] studentId, String Type) {		stutotalityStuResultDao.deleteByStudentIds(unitId, acadyear, semester, studentId, Type);	}	@Override	public String saveImportData(String classId,List<String[]> arrDatas, LoginInfo loginInfo) {		int successCount = 0;		String[] errorData = null;		List<String[]> errorDataList = new ArrayList<String[]>();		List<StutotalityHealthOption> stutotalityHealthOptions = new ArrayList<>();		if(StringUtils.isNotEmpty(classId)){			Clazz clazz = SUtils.dc(classRemoteService.findOneById(classId),Clazz.class);			if(StringUtils.isNotBlank(clazz.getGradeId())) {				Grade grade = SUtils.dc(gradeRemoteService.findOneById(clazz.getGradeId()), Grade.class);				stutotalityHealthOptions = stutotalityHealthOptionService.findByUnitIdAndGradeCode(loginInfo.getUnitId(), grade.getGradeCode());			}else {				errorData = new String[4];				errorData[0] = "1";				errorData[1] = "";				errorData[2] = "";				errorData[3] = "该班级无年级";				errorDataList.add(errorData);				return result(arrDatas.size(), 0, errorDataList.size(), errorDataList);			}		}		List<String> healthNames = new ArrayList<>();		if(CollectionUtils.isNotEmpty(stutotalityHealthOptions)){			for(StutotalityHealthOption stutotalityHealthOption:stutotalityHealthOptions){				if(StringUtils.isNotBlank(stutotalityHealthOption.getHealthName())){					if(stutotalityHealthOption.getHealthName().contains("视力")){						healthNames.add("左视力");						healthNames.add("右视力");					}else {						healthNames.add(stutotalityHealthOption.getHealthName());					}				}			}		}		//Set<String> healthNames = EntityUtils.getSet(stutotalityHealthOptions,StutotalityHealthOption::getHealthName);		Semester semester = SUtils.dc(semesterRemoteService.getCurrentSemester(2), Semester.class);		Set<String> studentIds = new HashSet<>();		if (CollectionUtils.isEmpty(arrDatas)) {			errorData = new String[4];			errorData[0] = "1";			errorData[1] = "";			errorData[2] = "";			errorData[3] = "没有导入数据";			errorDataList.add(errorData);			return "";		}		int totalCount = arrDatas.size();		Set<String> stuCodeSet = new HashSet<String>();		List<StutotalityStuResult> insertList = new ArrayList<>();		for (String[] arr : arrDatas) {			stuCodeSet.add(arr[0]);		}		List<Student> stuList = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(loginInfo.getUnitId(), stuCodeSet.toArray(new String[0])), new TR<List<Student>>() {		});		Map<String, Student> stuMap = new HashMap<String, Student>();		for (Student stu : stuList) {			stuMap.put(stu.getStudentCode(), stu);		}		Student stu = null;		//CreditModuleInfo creditModuleInfo = null;//		Set<String> stuIdSet = new HashSet<>();		for (String[] arr : arrDatas) {			String stuCode = arr[0] == null ? "" : arr[0].trim();			String stuName = arr[1] == null ? "" : arr[1].trim();//			String score1 = arr[2] == null ? "" : arr[2].trim();//			String acadyear = arr[3] == null ? "" : arr[3].trim();//			String semester = arr[4] == null ? "" : arr[4].trim();//			String subjectName = arr[5] == null ? "" : arr[5].trim();			if (org.apache.commons.lang3.StringUtils.isBlank(stuCode)) {				errorData = new String[4];				errorData[0] = errorDataList.size() + 1 + "";				errorData[1] = "学号";				errorData[2] = "";				errorData[3] = "学号不能为空";				errorDataList.add(errorData);				continue;			} else {				stu = stuMap.get(stuCode);				if (stu == null) {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学号";					errorData[2] = stuCode;					errorData[3] = "不存在该学号所属的学生";					errorDataList.add(errorData);					continue;				} else {					if (!stuName.equals(stu.getStudentName())) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "学号";						errorData[2] = "姓名：" + stuName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学号：" + stuCode;						errorData[3] = "学生姓名与该学号不匹配";						errorDataList.add(errorData);						continue;					}				}				if (studentIds.contains(stu.getId())) {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学号";					errorData[2] = stuCode;					errorData[3] = "该学生成绩重复";					errorDataList.add(errorData);					continue;				}			}			if (org.apache.commons.lang3.StringUtils.isBlank(stuName)) {				errorData = new String[4];				errorData[0] = errorDataList.size() + 1 + "";				errorData[1] = "学生姓名";				errorData[2] = "";				errorData[3] = "学生姓名不能为空";				errorDataList.add(errorData);				continue;			}			boolean isSuccess = true;			int i = 0;			for(String s :healthNames){				String score = arr[2+i] == null ? "" : arr[2+i].trim();				if(StringUtils.isNotBlank(score)) {					try {						Float.parseFloat(score);					} catch (NumberFormatException e) {						e.printStackTrace();						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = s;						errorData[2] = score;						errorData[3] = "请输入正确的" + s + "，只能为数字！";						errorDataList.add(errorData);						isSuccess = false;						break;					}					if (org.apache.commons.lang3.StringUtils.isBlank(score)) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = s;						errorData[2] = "";						errorData[3] = s + "不能为空";						errorDataList.add(errorData);						isSuccess = false;						break;					} else if (!(Float.parseFloat(score) >= 0 && Float.parseFloat(score) <= 9999)) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = s;						errorData[2] = score;						errorData[3] = "请输入正确的" + s + "，0-9999并且可以保留一位小数的数字！";						errorDataList.add(errorData);						isSuccess = false;						break;					}				}				i++;			}			if(!isSuccess){				continue;			}//            Student student = SUtils.dc(studentRemoteService.findOneBy(new String[]{"studentCode", "unitId", "isDeleted"},new String[]{stuCode,loginInfo.getUnitId(), "0"}), Student.class);			List<Student> students = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(loginInfo.getUnitId(),new String[]{stuCode}),new TR<List<Student>>(){});			Student student = null;			if(CollectionUtils.isNotEmpty(students)){				student = students.get(0);			}			if (student != null) {				if (!student.getClassId().equals(classId)){					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学生";					errorData[2] = student.getStudentName();					errorData[3] = "该班级没有此学生";					errorDataList.add(errorData);					continue;				}				studentIds.add(student.getId());				Clazz clazz = SUtils.dc(classRemoteService.findOneById(student.getClassId()),Clazz.class);				List<StutotalityHealthOption> list = new ArrayList<>();				if(clazz!=null){					Grade grade = SUtils.dc(gradeRemoteService.findOneById(clazz.getGradeId()),Grade.class);					List<Clazz> clazzsList = SUtils.dt(classRemoteService.findByGradeId(loginInfo.getUnitId(),grade.getId(),loginInfo.getOwnerId()), new TR<List<Clazz>>() {					});					if(CollectionUtils.isEmpty(clazzsList)&&!isAdmin(loginInfo.getUnitId(),loginInfo.getUserId())){						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "权限";						errorData[2] = "";						errorData[3] = "非班主任或管理员，无导入权限";						errorDataList.add(errorData);						break;					}					list = stutotalityHealthOptionService.findByUnitIdAndGradeCode(loginInfo.getUnitId(),grade.getGradeCode());//					Set<String> healNames1 = EntityUtils.getSet(list,StutotalityHealthOption::getHealthName);					Map<String,StutotalityHealthOption> healthOptionMap = EntityUtils.getMap(list,StutotalityHealthOption::getHealthName);					i=0;					String eyeData="";					for(String s :healthNames){						StutotalityStuResult stutotalityStuResult = new StutotalityStuResult();						String score = arr[2+i] == null ? "" : arr[2+i].trim();						i++;						if(StringUtils.isBlank(score)){							continue;						}						if (healthOptionMap.containsKey(s)){							Float result = Float.parseFloat(score);							stutotalityStuResult.setHealthResult(convertFloat(result).toString());							StutotalityHealthOption stutotalityHealthOption = healthOptionMap.get(s);							stutotalityStuResult.setId(UuidUtils.generateUuid());							stutotalityStuResult.setUnitId(loginInfo.getUnitId());							stutotalityStuResult.setAcadyear(semester.getAcadyear());							stutotalityStuResult.setSemester(semester.getSemester().toString());							stutotalityStuResult.setStudentId(student.getId());							stutotalityStuResult.setItemHealthId(stutotalityHealthOption.getHealthId());							stutotalityStuResult.setOptionId(stutotalityHealthOption.getId());							stutotalityStuResult.setType(Type3);							stutotalityStuResult.setCreationTime(new Date());							insertList.add(stutotalityStuResult);							//successCount++;						}else if(s.contains("视力")){							StutotalityHealthOption stutotalityHealthOption = new StutotalityHealthOption();							for(String s1:healthOptionMap.keySet()){								if(s1.contains("视力")){									stutotalityHealthOption = healthOptionMap.get(s1);								}							}							stutotalityStuResult.setId(UuidUtils.generateUuid());							stutotalityStuResult.setUnitId(loginInfo.getUnitId());							stutotalityStuResult.setAcadyear(semester.getAcadyear());							stutotalityStuResult.setSemester(semester.getSemester().toString());							stutotalityStuResult.setStudentId(student.getId());							stutotalityStuResult.setItemHealthId(stutotalityHealthOption.getHealthId());							stutotalityStuResult.setOptionId(stutotalityHealthOption.getId());							stutotalityStuResult.setType(Type3);							stutotalityStuResult.setCreationTime(new Date());							Float result = Float.parseFloat(score);							if(StringUtils.isBlank(eyeData)) {								eyeData = convertFloat(result).toString();							}else {								eyeData = eyeData+"_"+convertFloat(result);								stutotalityStuResult.setHealthResult(eyeData);								insertList.add(stutotalityStuResult);							}						}					}					successCount++;				}else {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学生";					errorData[2] = "";					errorData[3] = "该学生没有班级";					errorDataList.add(errorData);				}			}		}		if (CollectionUtils.isNotEmpty(insertList)) {			this.saveData(loginInfo.getUnitId(),semester.getAcadyear(),semester.getSemester().toString(),studentIds,Type3,insertList);		}		return result(totalCount, successCount, errorDataList.size(), errorDataList);	}	@Override	public String saveImportData1(String classId,List<String[]> arrDatas, LoginInfo loginInfo) {		int successCount = 0;		String[] errorData = null;		String unitId = loginInfo.getUnitId();		String userId = loginInfo.getUserId();		List<String[]> errorDataList = new ArrayList<String[]>();		Semester semester = SUtils.dc(semesterRemoteService.getCurrentSemester(2), Semester.class);		List<StutotalityItem> itemList = new ArrayList<>();		Clazz clazz1 = SUtils.dc(classRemoteService.findOneById(classId),Clazz.class);		if(StringUtils.isNotBlank(clazz1.getGradeId())) {			//Grade grade = SUtils.dc(gradeRemoteService.findOneById(clazz1.getGradeId()),Grade.class);			if (isAdmin(unitId, userId)) {				itemList = stutotalityItemService.getItemListByParams(unitId, semester.getAcadyear(), semester.getSemester().toString(), clazz1.getGradeId(), 1);			} else {				List<Clazz> clazzsList = SUtils.dt(classRemoteService.findByGradeId(unitId, clazz1.getGradeId(), loginInfo.getOwnerId()), new TR<List<Clazz>>() {				});//				classTeachingList = classTeachingList.stream().filter(classTeaching -> classTeaching.getClassId().equals(clazz1.getId())).collect(Collectors.toList());				if (CollectionUtils.isNotEmpty(clazzsList)) {					itemList = stutotalityItemService.getItemListByParams(unitId, semester.getAcadyear(), semester.getSemester().toString(), clazz1.getGradeId(), 1);				} else {					List<ClassTeaching> classTeachingList = SUtils.dt(classTeachingRemoteService.findClassTeachingList(unitId, semester.getAcadyear(), semester.getSemester() + "", loginInfo.getOwnerId()), new TR<List<ClassTeaching>>() {					});					if (CollectionUtils.isNotEmpty(classTeachingList)) {						classTeachingList = classTeachingList.stream().filter(classTeaching -> classTeaching.getClassId().equals(classId)).collect(Collectors.toList());						if (CollectionUtils.isNotEmpty(classTeachingList)) {							Set<String> subjectIds = classTeachingList.stream().map(ClassTeaching::getSubjectId).collect(Collectors.toSet());							if (CollectionUtils.isNotEmpty(subjectIds)) {								itemList = stutotalityItemService.findByParams(unitId, semester.getAcadyear(), semester.getSemester() + "", clazz1.getGradeId(), subjectIds.toArray(new String[0]));								itemList = itemList.stream().filter(stutotalityItem -> stutotalityItem.getSubjectType().equals("2")).collect(Collectors.toList());							}						}					}				}			}		}		//List<StutotalityHealthOption> stutotalityHealthOptions = stutotalityHealthOptionService.findByUnitIdAndGradeCode(loginInfo.getUnitId(),"");		List<String> itemNames = new ArrayList<>();		if(CollectionUtils.isNotEmpty(itemList)){			for(StutotalityItem item:itemList){				if(StringUtils.isNotBlank(item.getItemName())){					itemNames.add(item.getItemName());				}			}		}		Set<String> studentIds = new HashSet<>();		if (CollectionUtils.isEmpty(arrDatas)) {			errorData = new String[4];			errorData[0] = "1";			errorData[1] = "";			errorData[2] = "";			errorData[3] = "没有导入数据";			errorDataList.add(errorData);			return "";		}		int totalCount = arrDatas.size();		Set<String> stuCodeSet = new HashSet<String>();		List<StutotalityStuResult> insertList = new ArrayList<>();		for (String[] arr : arrDatas) {			stuCodeSet.add(arr[0]);		}		List<Student> stuList = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(loginInfo.getUnitId(), stuCodeSet.toArray(new String[0])), new TR<List<Student>>() {		});		Map<String, Student> stuMap = new HashMap<String, Student>();		for (Student stu : stuList) {			stuMap.put(stu.getStudentCode(), stu);		}		Student stu = null;		//CreditModuleInfo creditModuleInfo = null;//		Set<String> stuIdSet = new HashSet<>();		for (String[] arr : arrDatas) {			String stuCode = arr[0] == null ? "" : arr[0].trim();			String stuName = arr[1] == null ? "" : arr[1].trim();//			String score1 = arr[2] == null ? "" : arr[2].trim();//			String acadyear = arr[3] == null ? "" : arr[3].trim();//			String semester = arr[4] == null ? "" : arr[4].trim();//			String subjectName = arr[5] == null ? "" : arr[5].trim();			if (org.apache.commons.lang3.StringUtils.isBlank(stuCode)) {				errorData = new String[4];				errorData[0] = errorDataList.size() + 1 + "";				errorData[1] = "学号";				errorData[2] = "";				errorData[3] = "学号不能为空";				errorDataList.add(errorData);				continue;			} else {				stu = stuMap.get(stuCode);				if (stu == null) {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学号";					errorData[2] = stuCode;					errorData[3] = "不存在该学号所属的学生";					errorDataList.add(errorData);					continue;				} else {					if (!stuName.equals(stu.getStudentName())) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "学号";						errorData[2] = "姓名：" + stuName + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学号：" + stuCode;						errorData[3] = "学生姓名与该学号不匹配";						errorDataList.add(errorData);						continue;					}				}				if (studentIds.contains(stu.getId())) {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学号";					errorData[2] = stuCode;					errorData[3] = "该学生成绩重复";					errorDataList.add(errorData);					continue;				}			}			if (org.apache.commons.lang3.StringUtils.isBlank(stuName)) {				errorData = new String[4];				errorData[0] = errorDataList.size() + 1 + "";				errorData[1] = "学生姓名";				errorData[2] = "";				errorData[3] = "学生姓名不能为空";				errorDataList.add(errorData);				continue;			}			boolean isSuccess = true;			int i = 0;			for(String s :itemNames){				String score = arr[2+i] == null ? "" : arr[2+i].trim();				if(StringUtils.isNotBlank(score)) {					try {						Float.parseFloat(score);					} catch (NumberFormatException e) {						e.printStackTrace();						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "成绩";						errorData[2] = score;						errorData[3] = "请输入正确的" + s + "分数，只能为数字！";						errorDataList.add(errorData);						isSuccess = false;						break;					}					if (org.apache.commons.lang3.StringUtils.isBlank(score)) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "成绩";						errorData[2] = "";						errorData[3] = s + "成绩不能为空";						errorDataList.add(errorData);						isSuccess = false;						break;					} else if (!(Float.parseFloat(score) >= 0 && Float.parseFloat(score) <= 5 && Float.parseFloat(score) % 0.5 == 0)) {						errorData = new String[4];						errorData[0] = errorDataList.size() + 1 + "";						errorData[1] = "成绩";						errorData[2] = score;						errorData[3] = "请输入正确的" + s + "分数，0-5且必须为0.5的整数倍！";						errorDataList.add(errorData);						isSuccess = false;						break;					}				}				i++;			}			if(!isSuccess){				continue;			}//            Student student = SUtils.dc(studentRemoteService.findOneBy(new String[]{"studentCode", "unitId", "isDeleted"},new String[]{stuCode,loginInfo.getUnitId(), "0"}), Student.class);			List<Student> students = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(loginInfo.getUnitId(),new String[]{stuCode}),new TR<List<Student>>(){});			Student student = null;			if(CollectionUtils.isNotEmpty(students)){				student = students.get(0);			}			if (student != null) {				if (!student.getClassId().equals(classId)){					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学生";					errorData[2] = student.getStudentName();					errorData[3] = "该班级没有此学生";					errorDataList.add(errorData);					continue;				}				studentIds.add(student.getId());				Clazz clazz = SUtils.dc(classRemoteService.findOneById(student.getClassId()),Clazz.class);				List<StutotalityItem> list = new ArrayList<>();				if(clazz!=null){					Grade grade = SUtils.dc(gradeRemoteService.findOneById(clazz.getGradeId()),Grade.class);					if(isAdmin(loginInfo.getUnitId(),loginInfo.getUserId())){						list = stutotalityItemService.getItemListByParams(loginInfo.getUnitId(), semester.getAcadyear(), semester.getSemester().toString(), grade.getId(), 1);					}else {						List<Clazz> clazzsList = SUtils.dt(classRemoteService.findByGradeId(loginInfo.getUnitId(), grade.getId(), loginInfo.getOwnerId()), new TR<List<Clazz>>() {						});						if (CollectionUtils.isNotEmpty(clazzsList)) {							list = stutotalityItemService.getItemListByParams(loginInfo.getUnitId(), semester.getAcadyear(), semester.getSemester().toString(), grade.getId(), 1);						} else {							List<ClassTeaching> classTeachingList = SUtils.dt(classTeachingRemoteService.findClassTeachingList(loginInfo.getUnitId(), semester.getAcadyear(), semester.getSemester() + "", loginInfo.getOwnerId()), new TR<List<ClassTeaching>>() {							});							if (CollectionUtils.isNotEmpty(classTeachingList)) {								classTeachingList = classTeachingList.stream().filter(classTeaching -> classTeaching.getClassId().equals(classId)).collect(Collectors.toList());								if (CollectionUtils.isNotEmpty(classTeachingList)) {									Set<String> subjectIds = classTeachingList.stream().map(ClassTeaching::getSubjectId).collect(Collectors.toSet());									if (CollectionUtils.isNotEmpty(subjectIds)) {										itemList = stutotalityItemService.findByParams(loginInfo.getUnitId(), semester.getAcadyear(), semester.getSemester() + "", grade.getId(), subjectIds.toArray(new String[0]));										list = itemList.stream().filter(stutotalityItem -> stutotalityItem.getSubjectType().equals("2")).collect(Collectors.toList());									}								}							}						}					}					Map<String,StutotalityItem> itemMap = EntityUtils.getMap(list,StutotalityItem::getItemName);					i=0;					for(String s :itemNames){						StutotalityStuResult stutotalityStuResult = new StutotalityStuResult();						String score = arr[2+i] == null ? "" : arr[2+i].trim();						i++;						if(StringUtils.isBlank(score)){							continue;						}						if (itemMap.containsKey(s)){							Float result = Float.parseFloat(score);							stutotalityStuResult.setResult(convertFloat(result));							StutotalityItem stutotalityItem = itemMap.get(s);							stutotalityStuResult.setId(UuidUtils.generateUuid());							stutotalityStuResult.setUnitId(loginInfo.getUnitId());							stutotalityStuResult.setAcadyear(semester.getAcadyear());							stutotalityStuResult.setSemester(semester.getSemester().toString());							stutotalityStuResult.setStudentId(student.getId());							stutotalityStuResult.setItemHealthId(stutotalityItem.getId());//							stutotalityStuResult.setOptionId(stutotalityHealthOption.getId());							stutotalityStuResult.setType(Type2);							stutotalityStuResult.setCreationTime(new Date());							insertList.add(stutotalityStuResult);							//successCount++;						}					}					successCount++;				}else {					errorData = new String[4];					errorData[0] = errorDataList.size() + 1 + "";					errorData[1] = "学生";					errorData[2] = "";					errorData[3] = "该学生没有班级";					errorDataList.add(errorData);				}			}		}		if (CollectionUtils.isNotEmpty(insertList)) {			this.saveData(loginInfo.getUnitId(),semester.getAcadyear(),semester.getSemester().toString(),studentIds,Type2,insertList);		}		return result(totalCount, successCount, errorDataList.size(), errorDataList);	}	public Float convertFloat(Float f){		BigDecimal b =new BigDecimal(f);		float score =b.setScale(1,   BigDecimal.ROUND_HALF_UP).floatValue();		return score;	}	/**	 * 判断是否为教务管理员	 */	private boolean isAdmin(String unitId, String userId) {		boolean res = customRoleRemoteService.checkUserRole(unitId, StutotalityConstant.STUTOTALITY_SUBSYSTEM, StutotalityConstant.STUTOTALITY_MANAGE_CODE, userId);		return res;//        return true;	}}