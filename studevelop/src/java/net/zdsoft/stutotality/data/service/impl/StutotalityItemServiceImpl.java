package net.zdsoft.stutotality.data.service.impl;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.stutotality.data.dao.StutotalityItemDao;import net.zdsoft.stutotality.data.entity.StutotalityItem;import net.zdsoft.stutotality.data.entity.StutotalityType;import net.zdsoft.stutotality.data.service.StutotalityItemService;import net.zdsoft.stutotality.data.service.StutotalityTypeService;import org.apache.commons.collections.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Set;import java.util.stream.Collectors;/** * stutotality_item * @author * */@Service("stutotalityItemService")public class StutotalityItemServiceImpl extends BaseServiceImpl<StutotalityItem,String> implements StutotalityItemService{	@Autowired	private StutotalityItemDao stutotalityItemDao;	@Autowired	private StutotalityTypeService stutotalityTypeService;	@Override	protected BaseJpaRepositoryDao<StutotalityItem, String> getJpaDao() {		return stutotalityItemDao;	}	@Override	protected Class<StutotalityItem> getEntityClass() {		return StutotalityItem.class;	}	@Override	public List<StutotalityItem> getItemListByParams(String unitId, String acadyear, String semeter, String gradeId,Integer hasStat) {        List<StutotalityItem> lastList = new ArrayList<>();        List<StutotalityType> types =stutotalityTypeService.findByUnitIdAndAcadyearAndSemesterAndGradeIdAndHasStat(unitId, acadyear, semeter, gradeId, hasStat);		if(CollectionUtils.isNotEmpty(types)){            Set<String> typeIds = types.stream().map(StutotalityType::getId).collect(Collectors.toSet());            List<StutotalityItem> itemList = stutotalityItemDao.findListByTypeIds(typeIds.toArray(new String[0]));            //排序不同类别的项目            if(CollectionUtils.isNotEmpty(itemList)){                Map<String,List<StutotalityItem>> typeIdListMap=itemList.stream().collect(Collectors.groupingBy(StutotalityItem::getTypeId));                for(StutotalityType type:types){                    if(typeIdListMap.containsKey(type.getId())){                        lastList.addAll(typeIdListMap.get(type.getId()));                    }                }            }        }		return lastList;	}    @Override    public List<StutotalityItem> getListByTypeId(String typeId) {        List<StutotalityItem> listByTypeId = stutotalityItemDao.findListByTypeId(typeId);        return listByTypeId;    }    @Override    public void deleteByIds( String[] ids) {        stutotalityItemDao.deleteByIds(ids);    }	@Override	public List<StutotalityItem> findByUnitIdAndSubjectType(String unitId, String[] subjectTypes) {		return stutotalityItemDao.findByUnitIdAndSubjectType(unitId, subjectTypes);	}    @Override    public List<StutotalityItem> findByUnitIdAndYearAndSemesterAndSubjectType(String unitId, String acadyaer, String semester, String[] subjectTypes) {        return stutotalityItemDao.findByUnitIdAndAcadyearAndSemesterAndSubjectId(unitId,acadyaer,semester,subjectTypes);    }    @Override    public List<StutotalityItem> findByUnitIdAndSubjectTypeWithMaster(String unitId, String[] subjectTypes) {        return stutotalityItemDao.findByUnitIdAndSubjectType(unitId, subjectTypes);    }    @Override	public void deleteByUnitIdAndSubjectType(String unitId, String subjectType) {		stutotalityItemDao.deleteByUnitIdAndSubjectType(unitId, subjectType);	}	@Override	public List<StutotalityItem> findBySubjectIds(String[] subjectIds) {		return stutotalityItemDao.findBySubjectIds(subjectIds);	}    @Override    public List<StutotalityItem> getListByTypeIdsWithMaster(String[] typeIds) {        return stutotalityItemDao.findListByTypeIds(typeIds);    }    @Override    public List<StutotalityItem> getListByTypeIds(String[] typeIds) {        return stutotalityItemDao.findListByTypeIds(typeIds);    }    @Override    public List<StutotalityItem> getListByIds(String[] ids) {        return stutotalityItemDao.findListByIds(ids);    }    @Override    public List<StutotalityItem> findByParams(String unitId, String year, String semester, String gradeId, String[] subjectIds) {        return stutotalityItemDao.findByParams(unitId, year, semester, gradeId, subjectIds);    }}