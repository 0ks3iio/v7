package net.zdsoft.stutotality.data.service.impl;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.stutotality.data.dao.StutotalityTypeDao;import net.zdsoft.stutotality.data.entity.StutotalityType;import net.zdsoft.stutotality.data.service.StutotalityTypeService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import javax.persistence.criteria.CriteriaBuilder;import javax.persistence.criteria.CriteriaQuery;import javax.persistence.criteria.Predicate;import javax.persistence.criteria.Root;import java.util.ArrayList;import java.util.List;/** * stutotality_type * @author * */@Service("stutotalityTypeService")public class StutotalityTypeServiceImpl extends BaseServiceImpl<StutotalityType,String> implements StutotalityTypeService{	@Autowired	private StutotalityTypeDao stutotalityTypeDao;	@Override	protected BaseJpaRepositoryDao<StutotalityType, String> getJpaDao() {		return stutotalityTypeDao;	}	@Override	protected Class<StutotalityType> getEntityClass() {		return StutotalityType.class;	}    @Override    public void deleteByUnitIdAndGradeId(String unitId,String gradeId){        stutotalityTypeDao.deleteByUnitIdAndGradeId(unitId,gradeId);    }    @Override    public void deleteByCons(String unitId,String acadyear,String semester,String gradeId){        stutotalityTypeDao.deleteByCons(unitId,acadyear,semester,gradeId);    }    @Override    public List<StutotalityType> findByUnitIdGradeId(String unitId,String gradeId) {        return stutotalityTypeDao.findByUnitIdGradeId(unitId,gradeId);    }    @Override    public List<StutotalityType> findByUnitIdGradeIdWithMaster(String unitId,String gradeId) {        return stutotalityTypeDao.findByUnitIdGradeId(unitId,gradeId);    }    @Override    public List<StutotalityType> findByUnitId(String unitId) {        return stutotalityTypeDao.findByUnitId(unitId);    }    @Override	public List<StutotalityType> findByUnitIdAndAcadyearAndSemesterAndGradeIdAndHasStat(String unitId, String acadyear, String semester, String gradeId, Integer hasStat) {        Specification<StutotalityType> templateItemSpecification = new Specification<StutotalityType>() {            @Override            public Predicate toPredicate(Root<StutotalityType> root, CriteriaQuery<?> cq, CriteriaBuilder cb) {                List<Predicate> ps = new ArrayList<>();                ps.add(cb.equal(root.get("unitId").as(String.class), unitId));                ps.add(cb.equal(root.get("acadyear").as(String.class), acadyear));                ps.add(cb.equal(root.get("semester").as(String.class), semester));                if (StringUtils.isNotEmpty(gradeId)) {                    ps.add(cb.equal(root.get("gradeId").as(String.class), gradeId));                }                if (hasStat!=null) {                    ps.add(cb.equal(root.get("hasStat").as(Integer.class), hasStat));                }                cq.where(ps.toArray(new Predicate[0]));                cq.orderBy(cb.asc(root.get("orderNumber").as(Integer.class)));                return cq.getRestriction();            }        };        return stutotalityTypeDao.findAll(templateItemSpecification);//	    return stutotalityTypeDao.findByUnitIdAndAcadyearAndSemesterAndGradeIdAndHasStat(unitId, acadyear, semester, gradeId, hasStat);	}    @Override    public List<StutotalityType> findByUnitIdAndAcadyearAndSemesterAndGradeIdWithMaster(String unitId, String acadyear, String semester, String gradeId) {        return stutotalityTypeDao.findByUnitIdAndAcadyearAndSemesterAndGradeId(unitId, acadyear, semester, gradeId);    }    @Override    public List<StutotalityType> findByUnitIdAndAcadyearAndSemesterAndGradeId(String unitId, String acadyear, String semester, String gradeId) {        return stutotalityTypeDao.findByUnitIdAndAcadyearAndSemesterAndGradeId(unitId, acadyear, semester, gradeId);    }}