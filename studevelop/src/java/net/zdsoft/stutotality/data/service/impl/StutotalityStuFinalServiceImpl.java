package net.zdsoft.stutotality.data.service.impl;import net.zdsoft.basedata.entity.Student;import net.zdsoft.basedata.remote.service.StudentRemoteService;import net.zdsoft.basedata.service.impl.BaseServiceImpl;import net.zdsoft.framework.dao.BaseJpaRepositoryDao;import net.zdsoft.framework.entity.Json;import net.zdsoft.framework.entity.TR;import net.zdsoft.framework.utils.EntityUtils;import net.zdsoft.framework.utils.SUtils;import net.zdsoft.framework.utils.UuidUtils;import net.zdsoft.stutotality.data.dao.StutotalityStuFinalDao;import net.zdsoft.stutotality.data.entity.StutotalityStuFinal;import net.zdsoft.stutotality.data.service.StutotalityStuFinalService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * stutotality_stu_final  * @author  *  */@Service("stutotalityStuFinalService")public class StutotalityStuFinalServiceImpl extends BaseServiceImpl<StutotalityStuFinal,String> implements StutotalityStuFinalService{	@Autowired	private StutotalityStuFinalDao stutotalityStuFinalDao;	@Autowired    private StudentRemoteService studentRemoteService;	@Override	protected BaseJpaRepositoryDao<StutotalityStuFinal, String> getJpaDao() {		return stutotalityStuFinalDao;	}	@Override	protected Class<StutotalityStuFinal> getEntityClass() {		return StutotalityStuFinal.class;	}	@Override	public List<StutotalityStuFinal> findListByStuIds(String[] studentIds) {		return stutotalityStuFinalDao.findListByStuIds(studentIds);	}	@Override	public List<StutotalityStuFinal> findByAcadyearAndSemesterAndUnitIdAndStudentIds(String year, String semester, String unitId,String[] studentIds) {		return stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitIdAndStudentIdIn(year, semester, unitId, studentIds);	}	@Override	public List<StutotalityStuFinal> findByAcadyearAndSemesterAndUnitIdAndStudentIdsWithMaster(String year, String semester, String unitId,String[] studentIds) {		return stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitIdAndStudentIdIn(year, semester, unitId, studentIds);	}	@Override	public List<StutotalityStuFinal> findByAcadyearAndSemesterAndUnitId(String year, String semester, String unitId) {		return stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitId(year, semester, unitId);	}	@Override	public List<StutotalityStuFinal> findByAcadyearAndSemesterAndUnitIdWithMaster(String year, String semester, String unitId) {		return stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitId(year, semester, unitId);	}    @Override    public String attendRecordImport(String unitId, List<String[]> datas, String acadyear, String semester, String classId) {        Json importResultJson=new Json();        List<String[]> errorDataList=new ArrayList<String[]>();        int successCount  =0;        String[] errorData=null;        Set<String> stuCodeSet = new HashSet<String>();        List<StutotalityStuFinal> insertList=new ArrayList<StutotalityStuFinal>();        for(String[] arr : datas){            stuCodeSet.add(arr[0]);        }        if(stuCodeSet.size() == 0){            errorData = new String[4];            errorData[0]=errorDataList.size()+1+"";            errorData[1]="";            errorData[2]="";            errorData[3]="导入模板已更新，请重新下载模板";            errorDataList.add(errorData);            importResultJson.put("totalCount", errorDataList.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        }else {        List<Student> stuList = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(unitId, stuCodeSet.toArray(new String[0])), new TR<List<Student>>() {});        List<Student> studentList = SUtils.dt(studentRemoteService.findByClassIds(new String[]{classId}), new TR<List<Student>>() {});        Set<String> Ids = EntityUtils.getSet(studentList,Student::getId);        Map<String, String> stuCodeNameMap = new HashMap<String, String>();        Map<String, String> stuCodeIdMap = new HashMap<String, String>();        for(Student stu : stuList){            stuCodeNameMap.put(stu.getStudentCode(), stu.getStudentName());            stuCodeIdMap.put(stu.getStudentCode(), stu.getId());        }            for (String[] arr : datas) {                StutotalityStuFinal stuFinal = new StutotalityStuFinal();                if (StringUtils.isBlank(arr[0])) {                    errorData = new String[4];                    errorData[0] = errorDataList.size() + 1 + "";                    errorData[1] = "学号";                    errorData[2] = "";                    errorData[3] = "学号不能为空";                    errorDataList.add(errorData);                    continue;                }                if (StringUtils.isBlank(arr[1])) {                    errorData = new String[4];                    errorData[0] = errorDataList.size() + 1 + "";                    errorData[1] = "学生姓名";                    errorData[2] = "";                    errorData[3] = "学生姓名不能为空";                    errorDataList.add(errorData);                    continue;                } else {                    if (StringUtils.isBlank(stuCodeNameMap.get(arr[0]))) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "学号";                        errorData[2] = arr[1];                        errorData[3] = "不存在该学号所属的学生";                        errorDataList.add(errorData);                        continue;                    } else {                        if (StringUtils.isNotBlank(arr[1]) && !arr[1].equals(stuCodeNameMap.get(arr[0]))) {                            errorData = new String[4];                            errorData[0] = errorDataList.size() + 1 + "";                            errorData[1] = "学号";                            errorData[2] = "姓名：" + arr[1] + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学号：" + arr[0];                            errorData[3] = "学生姓名与该学号不匹配";                            errorDataList.add(errorData);                            continue;                        }                    }                }                if (CollectionUtils.isNotEmpty(Ids)) {                    if (!Ids.contains(stuCodeIdMap.get(arr[0]))) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "学号";                        errorData[2] = arr[0];                        errorData[3] = "导入非当前班级学生";                        errorDataList.add(errorData);                        continue;                    }                }                if (StringUtils.isNotBlank(arr[2])) {                    Pattern pattern = Pattern.compile("^(\\-|\\+)?\\d+(\\.\\d+)?$");                    Matcher isNum = pattern.matcher(arr[2]);                    if (!isNum.matches()) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "事假天数";                        errorData[2] = arr[2];                        errorData[3] = "事假天数有特殊字符";                        errorDataList.add(errorData);                        continue;                    }                    Float f = new Float(arr[2]);                    if (f < 0 | f >= 1000) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "事假天数";                        errorData[2] = arr[2];                        errorData[3] = "事假天数不符合";                        errorDataList.add(errorData);                        continue;                    } else {                        Double a = f / 0.5;                        if (a % 1 != 0) {                            errorData = new String[4];                            errorData[0] = errorDataList.size() + 1 + "";                            errorData[1] = "事假天数";                            errorData[2] = arr[2];                            errorData[3] = "请假天数须是0.5的整数倍";                            errorDataList.add(errorData);                            continue;                        }                    }                }                if (StringUtils.isNotBlank(arr[3])) {                    Pattern pattern = Pattern.compile("^(\\-|\\+)?\\d+(\\.\\d+)?$");                    Matcher isNum = pattern.matcher(arr[3]);                    if (!isNum.matches()) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "病假天数";                        errorData[2] = arr[3];                        errorData[3] = "病假天数有特殊字符";                        errorDataList.add(errorData);                        continue;                    }                    Float f = new Float(arr[3]);                    if (f < 0 | f >= 1000) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "病假天数";                        errorData[2] = arr[3];                        errorData[3] = "病假天数不符合";                        errorDataList.add(errorData);                        continue;                    } else {                        Double a = f / 0.5;                        if (a % 1 != 0) {                            errorData = new String[4];                            errorData[0] = errorDataList.size() + 1 + "";                            errorData[1] = "病假天数";                            errorData[2] = arr[3];                            errorData[3] = "请假天数须是0.5的整数倍";                            errorDataList.add(errorData);                            continue;                        }                    }                }                if (StringUtils.isNotBlank(arr[4])) {                    Pattern pattern = Pattern.compile("^(\\-|\\+)?\\d+(\\.\\d+)?$");                    Matcher isNum = pattern.matcher(arr[4]);                    if (!isNum.matches()) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "其他请假";                        errorData[2] = arr[4];                        errorData[3] = "其他请假天数有特殊字符";                        errorDataList.add(errorData);                        continue;                    }                    Float f = new Float(arr[4]);                    if (f < 0 | f >= 1000) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "其他请假";                        errorData[2] = arr[4];                        errorData[3] = "其他请假天数不符合";                        errorDataList.add(errorData);                        continue;                    } else {                        Double a = f / 0.5;                        if (a % 1 != 0) {                            errorData = new String[4];                            errorData[0] = errorDataList.size() + 1 + "";                            errorData[1] = "其他请假";                            errorData[2] = arr[4];                            errorData[3] = "请假天数须是0.5的整数倍";                            errorDataList.add(errorData);                            continue;                        }                    }                }                //通过学号 拿到学生ID                String studentId = stuCodeIdMap.get(arr[0]);                stuFinal.setStudentId(studentId);                if (StringUtils.isNotBlank(arr[2])) {                    stuFinal.setCasualLeave(new Float(arr[2]));                } else {                    stuFinal.setCasualLeave(null);                }                if (StringUtils.isNotBlank(arr[3])) {                    stuFinal.setSickLeave(new Float(arr[3]));                } else {                    stuFinal.setSickLeave(null);                }                if (StringUtils.isNotBlank(arr[4])) {                    stuFinal.setOtherLeave(new Float(arr[4]));                } else {                    stuFinal.setOtherLeave(null);                }                insertList.add(stuFinal);                successCount++;            }            // 根据学生Id 去重            List<StutotalityStuFinal> newFinal = new ArrayList<>();            List<String> newStuendIds = new ArrayList<>();            for (StutotalityStuFinal stuFinal : insertList) {                if (!newFinal.contains(stuFinal.getStudentId())) {                    newFinal.add(stuFinal);                    newStuendIds.add(stuFinal.getStudentId());                }            }            Map<String, StutotalityStuFinal> afterMap = new HashMap<>();            for (StutotalityStuFinal stuFinal : newFinal) {                afterMap.put(stuFinal.getStudentId(), stuFinal);            }            //筛选出有改动的学生            List<StutotalityStuFinal> afterStuFinal = new ArrayList<>();            List<StutotalityStuFinal> oldFinal = stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitId(acadyear, semester, unitId);            if (CollectionUtils.isNotEmpty(oldFinal)) {                List<String> str = new ArrayList<>();                for (StutotalityStuFinal stuFinal : oldFinal) {                    str.add(stuFinal.getStudentId());                    if (afterMap.containsKey(stuFinal.getStudentId())) {                        StutotalityStuFinal sf = afterMap.get(stuFinal.getStudentId());                        stuFinal.setCasualLeave(sf.getCasualLeave());                        stuFinal.setSickLeave(sf.getSickLeave());                        stuFinal.setOtherLeave(sf.getOtherLeave());                        stuFinal.setModifyTime(new Date());                        afterStuFinal.add(stuFinal);                    }                }                // 保存原有基础上 新增的对象                for (String newStuendId : newStuendIds) {                    if (!str.contains(newStuendId)) {                        StutotalityStuFinal s = afterMap.get(newStuendId);                        s.setId(UuidUtils.generateUuid());                        s.setUnitId(unitId);                        s.setAcadyear(acadyear);                        s.setSemester(semester);                        s.setCreationTime(new Date());                        s.setModifyTime(new Date());                        afterStuFinal.add(s);                    }                }                deleteAll(afterStuFinal.toArray(new StutotalityStuFinal[0]));                saveAll(afterStuFinal.toArray(new StutotalityStuFinal[0]));            } else {                for (StutotalityStuFinal s : newFinal) {                    s.setId(UuidUtils.generateUuid());                    s.setUnitId(unitId);                    s.setAcadyear(acadyear);                    s.setSemester(semester);                    s.setCreationTime(new Date());                    s.setModifyTime(new Date());                }            }            importResultJson.put("totalCount", datas.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        }    }  //******************************************   期末评价导入 **************************************************    @Override    public String acadListImport(String unitId, List<String[]> datas, String acadyear, String semester, String classId) {        Json importResultJson = new Json();        List<String[]> errorDataList = new ArrayList<String[]>();        int successCount = 0;        String[] errorData = null;        Set<String> stuCodeSet = new HashSet<String>();        List<StutotalityStuFinal> insertList = new ArrayList<StutotalityStuFinal>();        for (String[] arr : datas) {            stuCodeSet.add(arr[0]);        }        if (stuCodeSet.size() == 0) {            errorData = new String[4];            errorData[0] = errorDataList.size() + 1 + "";            errorData[1] = "";            errorData[2] = "";            errorData[3] = "导入模板已更新，请重新下载模板";            errorDataList.add(errorData);            importResultJson.put("totalCount", errorDataList.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        } else {            List<Student> stuList = SUtils.dt(studentRemoteService.findBySchIdStudentCodes(unitId, stuCodeSet.toArray(new String[0])), new TR<List<Student>>() {            });            List<Student> studentList = SUtils.dt(studentRemoteService.findByClassIds(new String[]{classId}), new TR<List<Student>>() {            });            Set<String> Ids = EntityUtils.getSet(studentList, Student::getId);            Map<String, String> stuCodeNameMap = new HashMap<String, String>();            Map<String, String> stuCodeIdMap = new HashMap<String, String>();            for (Student stu : stuList) {                stuCodeNameMap.put(stu.getStudentCode(), stu.getStudentName());                stuCodeIdMap.put(stu.getStudentCode(), stu.getId());            }            for (String[] arr : datas) {                StutotalityStuFinal stuFinal = new StutotalityStuFinal();                if (StringUtils.isBlank(arr[0])) {                    errorData = new String[4];                    errorData[0] = errorDataList.size() + 1 + "";                    errorData[1] = "学号";                    errorData[2] = "";                    errorData[3] = "学号不能为空";                    errorDataList.add(errorData);                    continue;                }                if (StringUtils.isBlank(arr[1])) {                    errorData = new String[4];                    errorData[0] = errorDataList.size() + 1 + "";                    errorData[1] = "学生姓名";                    errorData[2] = "";                    errorData[3] = "学生姓名不能为空";                    errorDataList.add(errorData);                    continue;                } else {                    if (StringUtils.isBlank(stuCodeNameMap.get(arr[0]))) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "学号";                        errorData[2] = arr[1];                        errorData[3] = "不存在该学号所属的学生";                        errorDataList.add(errorData);                        continue;                    } else {                        if (StringUtils.isNotBlank(arr[1]) && !arr[1].equals(stuCodeNameMap.get(arr[0]))) {                            errorData = new String[4];                            errorData[0] = errorDataList.size() + 1 + "";                            errorData[1] = "学号";                            errorData[2] = "姓名：" + arr[1] + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学号：" + arr[0];                            errorData[3] = "学生姓名与该学号不匹配";                            errorDataList.add(errorData);                            continue;                        }                    }                }                if (CollectionUtils.isNotEmpty(Ids)) {                    if (!Ids.contains(stuCodeIdMap.get(arr[0]))) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "学号";                        errorData[2] = arr[0];                        errorData[3] = "导入非当前班级学生";                        errorDataList.add(errorData);                        continue;                    }                }                if (StringUtils.isBlank(arr[2])) {                    errorData = new String[4];                    errorData[0] = errorDataList.size() + 1 + "";                    errorData[1] = "班主任寄语";                    errorData[2] = "";                    errorData[3] = "寄语为空";                    errorDataList.add(errorData);                    continue;                } else {                    int length = arr[2].length();                    if (length > 500) {                        errorData = new String[4];                        errorData[0] = errorDataList.size() + 1 + "";                        errorData[1] = "班主任寄语";                        errorData[2] = "";                        errorData[3] = "寄语字数不能超过500个字符";                        errorDataList.add(errorData);                        continue;                    }                }                //通过学号 拿到学生ID                String studentId = stuCodeIdMap.get(arr[0]);                stuFinal.setStudentId(studentId);                stuFinal.setTeacherContent(arr[2]);                insertList.add(stuFinal);                successCount++;            }            // 根据学生Id 去重            List<StutotalityStuFinal> newFinal = new ArrayList<>();            List<String> newStuendIds = new ArrayList<>();            for (StutotalityStuFinal stuFinal : insertList) {                if (!newFinal.contains(stuFinal.getStudentId())) {                    newFinal.add(stuFinal);                    newStuendIds.add(stuFinal.getStudentId());                }            }            Map<String, StutotalityStuFinal> afterMap = new HashMap<>();            for (StutotalityStuFinal stuFinal : newFinal) {                afterMap.put(stuFinal.getStudentId(), stuFinal);            }            //筛选出有改动的学生            List<StutotalityStuFinal> afterStuFinal = new ArrayList<>();            List<StutotalityStuFinal> oldFinal = stutotalityStuFinalDao.findByAcadyearAndSemesterAndUnitId(acadyear, semester, unitId);            if (CollectionUtils.isNotEmpty(oldFinal)) {                List<String> str = new ArrayList<>();                for (StutotalityStuFinal stuFinal : oldFinal) {                    str.add(stuFinal.getStudentId());                    if (afterMap.containsKey(stuFinal.getStudentId())) {                        StutotalityStuFinal sf = afterMap.get(stuFinal.getStudentId());                        stuFinal.setTeacherContent(sf.getTeacherContent());                        stuFinal.setModifyTime(new Date());                        afterStuFinal.add(stuFinal);                    }                }                // 保存原有基础上 新增的对象                for (String newStuendId : newStuendIds) {                    if (!str.contains(newStuendId)) {                        StutotalityStuFinal s = afterMap.get(newStuendId);                        s.setId(UuidUtils.generateUuid());                        s.setUnitId(unitId);                        s.setAcadyear(acadyear);                        s.setSemester(semester);                        s.setCreationTime(new Date());                        s.setModifyTime(new Date());                        afterStuFinal.add(s);                    }                }                deleteAll(afterStuFinal.toArray(new StutotalityStuFinal[0]));                saveAll(afterStuFinal.toArray(new StutotalityStuFinal[0]));            } else {                for (StutotalityStuFinal s : newFinal) {                    s.setId(UuidUtils.generateUuid());                    s.setUnitId(unitId);                    s.setAcadyear(acadyear);                    s.setSemester(semester);                    s.setCreationTime(new Date());                    s.setModifyTime(new Date());                }            }            importResultJson.put("totalCount", datas.size());            importResultJson.put("successCount", successCount);            importResultJson.put("errorCount", errorDataList.size());            importResultJson.put("errorData", errorDataList);            return importResultJson.toJSONString();        }    }}