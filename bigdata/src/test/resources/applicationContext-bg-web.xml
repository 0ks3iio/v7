<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:c="http://www.springframework.org/schema/c"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
	http://www.springframework.org/schema/data/repository
   	http://www.springframework.org/schema/data/repository/spring-repository.xsd
	http://www.springframework.org/schema/data/jpa
	http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache.xsd
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring.xsd
	http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
	 http://www.springframework.org/schema/jee
     http://www.springframework.org/schema/jee/spring-jee.xsd
	http://www.springframework.org/schema/websocket
	http://www.springframework.org/schema/websocket/spring-websocket.xsd"
       default-lazy-init="true">

    <context:property-placeholder location="classpath*:/conf/conf.properties" />
    <context:property-placeholder location="classpath*:/conf/redis.properties" />
    <context:property-placeholder location="classpath*:/conf/framework.properties" />

    <context:component-scan base-package="net.zdsoft">
        <context:include-filter
                expression="net\.zdsoft\\.[^.]+(dao|service|component|config)" type="regex" />
    </context:component-scan>
    <!-- 注入配置 -->

    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 <bean id="targetConnectionFactory"
        class="org.apache.activemq.ActiveMQConnectionFactory"> <property name="brokerURL"
        value="tcp://localhost:61616" /> </bean> <bean id="pooledConnectionFactory"
        class="org.apache.activemq.pool.PooledConnectionFactory"> <property name="connectionFactory"
        ref="targetConnectionFactory" /> <property name="maxConnections" value="10"
        /> </bean> <bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="pooledConnectionFactory" />
        </bean> <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory" /> </bean> <bean
        id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg> <value>queue</value> </constructor-arg> </bean> <bean id="topicDestination"
        class="org.apache.activemq.command.ActiveMQTopic"> <constructor-arg value="topic"
        /> </bean> <bean id="consumerMessageListener" class="com.tiantian.springintejms.listener.ConsumerMessageListener"/>
        <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" /> <property name="destination"
        ref="queueDestination" /> <property name="messageListener" ref="consumerMessageListener"
        /> </bean> -->

    <!-- 需要在 <beans> 标签中增加对 jpa 命名空间的引用 <jpa:repositories base-package="net.zdsoft.*.dao"
        repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"
        transaction-manager-ref="txManagerJap" /> -->
    <jpa:repositories base-package="net.zdsoft.**.dao"
                      repository-impl-postfix="Impl" entity-manager-factory-ref="entityManagerFactory"
                      factory-class="net.zdsoft.framework.dao.BaseJpaFactory"
                      transaction-manager-ref="txManagerJap" />

    <!-- 使用Druid连接池 -->
    <bean id="dataSource_master" class="com.alibaba.druid.pool.DruidDataSource "
          init-method="init" destroy-method="close"> <!-- 基本属性 url、user、getPassword -->
        <property name="url" value="${hibernate.connection.url}" />
        <property name="username" value="${hibernate.connection.username}" />
        <property name="password" value="${hibernate.connection.password}" />
        <property name="connectionProperties" value="${hibernate.connection.driver_class}"></property>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="100" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- <property name="validationQuery" value="SELECT 'x'" /> -->
        <property name="validationQuery" value="SELECT 1 from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>
    <bean id="dataSource_slave" class="com.alibaba.druid.pool.DruidDataSource "
          init-method="init" destroy-method="close"> <!-- 基本属性 url、user、getPassword -->
        <property name="url" value="${hibernate.connection.url.slave}" />
        <property name="username" value="${hibernate.connection.username.slave}" />
        <property name="password" value="${hibernate.connection.password.slave}" />
        <property name="connectionProperties" value="${hibernate.connection.driver_class}"></property>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="10" />
        <property name="maxActive" value="100" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- <property name="validationQuery" value="SELECT 'x'" /> -->
        <property name="validationQuery" value="SELECT 1 from dual" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> <!-- 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 数据库读写分离配置 -->
    <bean id="dataSource" class="com.taobao.tddl.jdbc.group.SpringTGroupDataSource"
          init-method="init">
        <property name="dataSources"
                  value="dataSource_master:w1r0, dataSource_slave:w0r1" />
        <property name="type" value="oracle" />
    </bean>

    <!-- 动态dataSource -->
    <bean id="dataSourceJap" class="net.zdsoft.framework.config.RwDataRoutingDataSource">
        <property name="slaves" value="2" /><!-- 允许read操作的节点个数 -->
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="WRITE" value-ref="dataSource_master" />
                <entry key="READ" value-ref="dataSource_slave" />
                <!-- 允许部分read到slave上 -->
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource_slave" /><!--
			or master -->
    </bean>

    <bean id="namedParameterJdbcDaoSupport"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- JPA实体管理器工厂 -->
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSourceJap" />
        <property name="persistenceProvider" ref="persistenceProvider" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
        <property name="jpaDialect" ref="jpaDialect" />
        <property name="packagesToScan">
            <list>
                <value>net.zdsoft.**.entity</value>
                <value>net.zdsoft.**.entity.**</value>
            </list>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.connection.driver_class">${hibernate.connection.provider_class}</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.jdbc.fetch_size">18</prop>
                <prop key="hibernate.jdbc.batch_size">10</prop>
                <!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
                <prop key="hibernate.ejb.naming_strategy">net.zdsoft.framework.config.WpImprovedNamingStrategy
                </prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> -->
                <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
    </bean>

    <!-- 用于指定持久化实现厂商类 -->
    <bean id="persistenceProvider" class="org.hibernate.ejb.HibernatePersistence" />
    <!-- 用于设置JPA实现厂商的特定属性 -->
    <bean id="jpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <!-- 枚举类 DB2, DERBY, H2, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER,
            SYBASE -->
        <property name="database" value="ORACLE" />
    </bean>
    <!-- 用于指定一些高级特性 -->
    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />

    <bean
            class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"></bean>

    <!-- 注解式事务 -->
    <tx:annotation-driven transaction-manager="txManagerJap" />

    <tx:advice id="txAdvice" transaction-manager="txManagerJap">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" />
            <tx:method name="save*" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" />
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" />
            <tx:method name="remove*" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" />
            <tx:method name="deal*" propagation="REQUIRED" read-only="false" />
            <tx:method name="*" read-only="true" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- 定义一个切入点，使事务在它的切入点内有效 -->
    <aop:config>
        <aop:pointcut
                expression="execution(* net.zdsoft..*Service.*(..)) and !execution(* net..custom..*Service.*(..))"
                id="pointcut" />
        <aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice" />
    </aop:config>

    <!-- 事务管理器 -->
    <bean id="txManagerJap" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>
</beans>